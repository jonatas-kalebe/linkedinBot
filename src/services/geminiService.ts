import { GoogleGenerativeAI } from '@google/generative-ai';
import * as dotenv from 'dotenv';

dotenv.config();

const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
  throw new Error('A vari√°vel de ambiente GEMINI_API_KEY n√£o foi definida.');
}

const genAI = new GoogleGenerativeAI(apiKey);


const models = [
//    'gemini-2.5-pro',
    'gemini-2.5-flash',
    'gemini-2.5-flash-lite'
];
let currentModelIndex = 0;

async function generateContentWithFallback(prompt: string): Promise<string> {
  while (currentModelIndex < models.length) {
    try {
      const modelName = models[currentModelIndex];
      console.log(`üß†  Consultando a IA com o modelo: ${modelName}...`);
      const model = genAI.getGenerativeModel({ model: modelName });
      const result = await model.generateContent(prompt);
      return result.response.text();
    } catch (error: any) {
      console.warn(`‚ö†Ô∏è  Modelo ${models[currentModelIndex]} falhou ou atingiu o limite. Tentando o pr√≥ximo...`);
      currentModelIndex++;
      if (currentModelIndex >= models.length) {
        throw new Error('Todos os modelos da IA falharam ou atingiram o limite de uso.');
      }
    }
  }
  throw new Error('N√£o foi poss√≠vel obter resposta de nenhum modelo da IA.');
}

// ### FUN√á√ÉO DE AN√ÅLISE REESCRITA E MAIS INTELIGENTE ###
export async function analyzeJobFit(jobDescription: string, userProfile: string, allowedLanguages: string[]): Promise<{ isFit: boolean; language: string; reason: string }> {
  const prompt = `
    **TAREFA:** Voc√™ √© um recrutador s√™nior. Analise a vaga e o perfil do usu√°rio e retorne um objeto JSON.

    **PASSOS:**
    1. Determine o idioma principal da 'DESCRI√á√ÉO DA VAGA'.
    2. Verifique se o idioma detectado est√° na lista de 'IDIOMAS PERMITIDOS'. Se n√£o estiver, o 'isFit' √© false.
    3. Analise se as tecnologias, n√≠vel de experi√™ncia e tipo de trabalho da vaga s√£o compat√≠veis com o 'PERFIL DO USU√ÅRIO'.
    4. Retorne um objeto JSON com o formato: {"isFit": boolean, "language": "idioma_detectado", "reason": "motivo_da_decis√£o"}

    **EXEMPLOS DE SA√çDA:**
    - {"isFit": true, "language": "portuguese", "reason": "Compat√≠vel com Java, S√™nior e remoto."}
    - {"isFit": false, "language": "german", "reason": "Idioma n√£o permitido."}
    - {"isFit": false, "language": "english", "reason": "A vaga exige 10 anos de experi√™ncia, o perfil tem 4."}

    ---
    **IDIOMAS PERMITIDOS:**
    ${JSON.stringify(allowedLanguages)}
    ---
    **PERFIL DO USU√ÅRIO:**
    ${userProfile}
    ---
    **DESCRI√á√ÉO DA VAGA:**
    ${jobDescription}
    ---
    **SA√çDA (APENAS O OBJETO JSON):**
  `;

  try {
    const rawResponse = await generateContentWithFallback(prompt);
    const cleanedResponse = rawResponse.replace(/```json/g, '').replace(/```/g, '').trim();
    const result = JSON.parse(cleanedResponse);
    return result;
  } catch (error) {
    console.error("Erro ao processar resposta da IA. Retornando 'n√£o fit'.", error);
    return { isFit: false, language: 'unknown', reason: 'Erro de an√°lise da IA.' };
}
}

export async function generateLatexCV(jobDescription: string, userProfile: string, latexTemplate: string, jobLanguage: string): Promise<string> {
  const prompt = `
    **TAREFA:** Voc√™ √© um especialista em LaTeX e recrutamento. Adapte o template de curr√≠culo em LaTeX fornecido para que ele seja perfeito para a descri√ß√£o da vaga.
    **INSTRU√á√ïES:** Mantenha a estrutura geral. Adapte o resumo profissional para conectar as habilidades do usu√°rio com os requisitos da vaga. Priorize as habilidades mencionadas na vaga. Adapte o texto para o idioma da vaga: '${jobLanguage}'.
    **SA√çDA:** Retorne APENAS o c√≥digo LaTeX completo e v√°lido. N√£o inclua explica√ß√µes, coment√°rios ou a tag \`\`\`latex.
    ---
    **PERFIL DO USU√ÅRIO:**
    ${userProfile}
    ---
    **TEMPLATE LATEX BASE:**
    ${latexTemplate}
    ---
    **DESCRI√á√ÉO DA VAGA:**
    ${jobDescription}
    ---
    **C√ìDIGO LATEX GERADO:**
  `;
  return await generateContentWithFallback(prompt);
}