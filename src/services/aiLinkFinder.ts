import { Page } from 'puppeteer';
import {generateWithRetryLite} from "./geminiService";
import {cleanHtmlForAnalysis} from "../utils/htmlUtils";


/**
 * Usa a IA para analisar o HTML de uma p√°gina de carreiras e encontrar os links para as vagas individuais.
 * @param page A inst√¢ncia da p√°gina do Puppeteer.
 * @param careersPageUrl A URL da p√°gina de carreiras, para contexto.
 * @returns Uma lista de URLs de vagas encontradas.
 */
export async function findJobLinksWithAI(page: Page, careersPageUrl: string): Promise<string[]> {
    console.log(`- ü§ñ Usando IA para encontrar links de vagas em: ${careersPageUrl}`);
    try {
        const rawHtml = await page.content();
        const cleanedHtml = cleanHtmlForAnalysis(rawHtml);

        const prompt = `
          **TAREFA:** Voc√™ √© um assistente especialista em analisar HTML de p√°ginas de "Carreiras". Sua fun√ß√£o √© encontrar TODOS os links que levam a uma descri√ß√£o de vaga de emprego INDIVIDUAL e ESPEC√çFICA.

          **CONTEXTO:**
          - A p√°gina √©: ${careersPageUrl}
          - O HTML abaixo √© o conte√∫do desta p√°gina.

          **INSTRU√á√ïES CR√çTICAS:**
          1.  **FOCO EM VAGAS ESPEC√çFICAS:** Procure por links cujo texto seja um cargo (ex: "Software Engineer", "Product Manager", "Desenvolvedor Backend").
          2.  **IGNORE LINKS GEN√âRICOS:** Ignore links com textos como "View All Jobs", "Explore Careers", "Our Teams", "Locations", "Benef√≠cios". O objetivo N√ÉO √© encontrar a lista de vagas, mas sim os links DIRETOS para cada vaga individual a partir da lista.
          3.  **EXTRAIA O HREF COMPLETO:** Extraia o atributo \`href\` completo de cada link v√°lido que encontrar.
          4.  **FORMATO DA RESPOSTA:** Sua resposta deve ser **APENAS UM OBJETO JSON V√ÅLIDO**.
          5.  A estrutura deve ser: { "jobUrls": ["https://.../job1", "https://.../job2", ...] }
          6.  Se nenhum link de vaga **espec√≠fica** for encontrado, retorne um array vazio: { "jobUrls": [] }

          **HTML PARA AN√ÅLISE:**
          \`\`\`html
          ${cleanedHtml}
          \`\`\`
        `;

        const jsonResponse = await generateWithRetryLite(prompt);
        const cleanedJson = jsonResponse.replace(/```json/g, '').replace(/```/g, '').trim();
        const parsed = JSON.parse(cleanedJson);

        if (parsed.jobUrls && Array.isArray(parsed.jobUrls)) {
            // SOLU√á√ÉO: Garante que todos os itens do array s√£o strings e que as URLs s√£o v√°lidas.
            const validUrls = parsed.jobUrls
                .filter((url: unknown): url is string => typeof url === 'string' && url.length > 0)
                .map((url: string) => {
                    try {
                        // Constr√≥i a URL absoluta para tratar links relativos (ex: /jobs/123)
                        return new URL(url, careersPageUrl).href;
                    } catch (e) {
                        console.warn(`[IA] URL inv√°lida retornada e ignorada: ${url}`);
                        return null; // Marca a URL inv√°lida para remo√ß√£o
                    }
                })
                // @ts-ignore
                .filter((url: null): url is string => url !== null); // Remove as URLs nulas/inv√°lidas

            const uniqueUrls = [...new Set(validUrls)];
            console.log(`- ‚úÖ IA encontrou ${uniqueUrls.length} links de vagas v√°lidos.`);
            // @ts-ignore
            return uniqueUrls;
        }

        return [];
    } catch (error) {
        console.error(`- ‚ùå Erro ao usar IA para encontrar links de vagas:`, error);
        return [];
    }
}